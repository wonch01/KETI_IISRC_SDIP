version: '3.8'

networks:
  iisrc-bridge:
    external: true

services:
  flask_app:
    image: keti_iisrc_sdip_api_server
    container_name: KETI_IISRC_SDIP_API_SERVER
    ports:
      - "${FLASK_PORT}:5000"
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - redis
    networks:
      iisrc-bridge:
        ipv4_address: ${FLASK_IP}
    restart: always
  
  celery_worker:
    build: .
    container_name: KETI_IISRC_SDIP_CELERY_WORKER
    working_dir: /app
    command: celery -A FlaskServer.FlaskServer_main.celery worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - flask_app
      - redis
    networks:
      iisrc-bridge:
        ipv4_address: ${CELERY_WORKER_IP}
        

  redis:
    image: taehoony/redis:1.0
    container_name: KETI_IISRC_Redis
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      iisrc-bridge:
        ipv4_address: ${REDIS_IP}